;---------------------------------------------------------------------------------------------------------------------------------------------------------------
INCLUDE irvine32.inc

.data

Handler Dword 0
Root Dword 0
Total_Nodes Dword 0
Multiplier Byte 4
Divisor Byte 4
Index Dword 0

Search Proto Value:Dword
Insert Proto Value:Dword
Print_Tree_Level_Order_Traversing Proto 
Print_Tree_Pre_Order_Traversing Proto Root_Node:Dword
Print_Tree_In_Order_Traversing Proto Root_Node:Dword
Print_Tree_Post_Order_Traversing Proto Root_Node:Dword
Prompt1 Byte "Level Order Traversal , " , 0
Prompt2 Byte "Pre Order Traversal , " , 0
Prompt3 Byte "In Order Traversal , " , 0
Prompt4 Byte "Post Order Traversal , " , 0
SearchF Byte "Search Result Found" , 0
SearchNF Byte "Search Result Not Found" , 0


.code
main PROC
call Getprocessheap
mov Handler , Eax
invoke Heapalloc , Handler , HEAP_ZERO_MEMORY , 1500
mov Root , Eax
mov Esi , Eax
invoke Insert , 1
invoke Insert , 1
invoke Insert , 3
invoke Insert , 3
invoke Insert , 5
invoke Insert , 6
invoke Insert , 7
invoke Print_Tree_Level_Order_Traversing
call crlf
call crlf
call crlf
mov edx , offset Prompt2
call writestring
call crlf
invoke Print_Tree_Pre_Order_Traversing , Root
call crlf
call crlf
call crlf
mov edx , offset Prompt3
call writestring
call crlf
invoke Print_Tree_In_Order_Traversing , Root
call crlf
call crlf
call crlf
mov edx , offset Prompt4
call writestring
call crlf
invoke Print_Tree_Post_Order_Traversing , Root
call crlf
call crlf
call crlf
invoke Search , 4

main Endp

;--------------------------------------------------------
Insert PROC , Value : Dword   ; Start Of Insert Procedure
mov eax , Esi
sub eax , Root
div Divisor
mov Index , eax
mov ebx , [Esi]
cmp ebx , 0
je Root_Case
cmp Value , ebx
jg Right_Child_Case
jl Left_Child_Case
je Leave_Insert
;------------------
Root_Case :
mov Ebx , Value
mov [Esi] , Ebx
inc Total_Nodes
jmp Leave_Insert
;------------------
Right_Child_Case:
mov eax , Index
imul Multiplier
add eax , 8
Add Esi ,  eax
invoke Insert , Value
jmp Leave_Insert
;------------------
Left_Child_Case:
mov eax , Index
imul Multiplier
Add eax , 4
Add Esi ,  Eax
invoke Insert , Value
jmp Leave_Insert
;------------------
Leave_Insert:
mov Esi , Root
Mov Index , 0
ret
Insert Endp                  ; End Of Insert Procedure
;-----------------------------------------------------




;------------------------------------------------------
Print_Tree_Level_Order_Traversing PROC
push Ebp 
mov Ebp , Esp
mov Ecx , Total_Nodes
mov Edx , Offset Prompt1
call writestring
call crlf
mov Esi , Root
Printing_Tree:
mov Eax , [Esi]
cmp eax , 0
je Do_Not_Write_Number
call writedec
call crlf
add Esi , 4
Loop Printing_Tree
Do_Not_Write_Number :
add Esi , 4
inc ecx
Loop Printing_Tree
pop Ebp
mov esi , Root
ret
Print_Tree_Level_Order_Traversing Endp
;--------------------------------------------------------






;--------------------------------------------------------
Print_Tree_Pre_Order_Traversing PROC , Root_Node : Dword
mov Eax , Root_Node
sub Eax , Root
div Divisor
mov Index , Eax
mov Eax , Root_Node
mov Eax , [Eax]
cmp Eax , 0
je Leave_Print_Tree_Pre_Order_Traversing
call Writedec
call crlf
mov Esi , Root_Node
mov Eax , Index
mul Multiplier
add Eax , 4
add esi , eax
invoke Print_Tree_Pre_Order_Traversing , Esi
mov Eax , Root_Node
sub Eax , Root
div Divisor
mov Index , Eax
mov Esi , Root_Node
mov Eax , Index
mul Multiplier
add Eax , 8
add esi , eax
mov bl , [esi]
invoke Print_Tree_Pre_Order_Traversing , Esi
jmp Leave_Print_Tree_Pre_Order_Traversing
Leave_Print_Tree_Pre_Order_Traversing:
mov esi , Root
ret
Print_Tree_Pre_Order_Traversing Endp
;--------------------------------------------------------







;--------------------------------------------------------
Print_Tree_In_Order_Traversing PROC , Root_Node : Dword
mov esi , Root_Node
mov al , [esi]
cmp al , 0
je Leave_Print_Tree_In_Order_Traversing
mov Eax , Root_Node
mov Esi , Root_Node
sub Eax , Root
div Divisor
mov Index , Eax
mul Multiplier
add eax , 4
add esi , eax
invoke Print_Tree_In_Order_Traversing , esi
mov Eax , Root_Node
mov eax , [eax]
call writedec
call crlf
mov eax , Root_Node
mov Esi , Root_Node
sub Eax , Root
div Divisor
mov Index , Eax
mul Multiplier
add eax , 8
add esi , eax
invoke Print_Tree_In_Order_Traversing , esi
jmp Leave_Print_Tree_In_Order_Traversing
Leave_Print_Tree_In_Order_Traversing:
mov esi , Root
ret
Print_Tree_In_Order_Traversing Endp
;--------------------------------------------------------






;--------------------------------------------------------
Print_Tree_Post_Order_Traversing PROC , Root_Node : Dword
mov esi , Root_Node
mov al , [esi]
cmp al , 0
je Leave_Print_Tree_Post_Order_Traversing
mov Eax , Root_Node
mov Esi , Root_Node
sub Eax , Root
div Divisor
mov Index , Eax
mul Multiplier
add eax , 4
add esi , eax
invoke Print_Tree_Post_Order_Traversing , esi
mov eax , Root_Node
mov Esi , Root_Node
sub Eax , Root
div Divisor
mov Index , Eax
mul Multiplier
add eax , 8
add esi , eax
invoke Print_Tree_Post_Order_Traversing , esi
mov Eax , Root_Node
mov eax , [eax]
call writedec
call crlf
jmp Leave_Print_Tree_Post_Order_Traversing
Leave_Print_Tree_Post_Order_Traversing:
mov esi , Root
ret
Print_Tree_Post_Order_Traversing Endp
;--------------------------------------------------------




;--------------------------------------------------------
Search PROC , Value : Dword   
mov eax , Esi
sub eax , Root
div Divisor
mov Index , eax
mov ebx , [Esi]
cmp ebx , 0
je Not_Found_Case
cmp Value , ebx
je Found_Case
jg Search_Right_Sub_Tree_Case
jl Search_Left_Sub_Tree_Case
;------------------
Not_Found_Case :
mov Edx , Offset SearchNF
call crlf
call writestring
jmp Leave_Search
;------------------
Found_Case:
mov edx , offset SearchF
call crlf
call writestring
jmp Leave_Search
;------------------
Search_Right_Sub_Tree_Case:
mov eax , Index
imul Multiplier
add eax , 8
Add Esi ,  eax
invoke Search , Value
jmp Leave_Search
;------------------
Search_Left_Sub_Tree_Case:
mov eax , Index
imul Multiplier
Add eax , 4
Add Esi ,  Eax
invoke Search , Value
jmp Leave_Search
;------------------
Leave_Search:
call crlf
call crlf
mov Esi , Root
Mov Index , 0
ret
Search Endp                 
;-----------------------------------------------------







End Main
;------------------------------------------------------------------------------------------------------------------------------------------------------------------
