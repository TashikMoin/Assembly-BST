;---------------------------------------------------------------------------------------------------------------------------------------------------------------
INCLUDE irvine32.inc

.data

Handler Dword 0
Root Dword 0
Total_Nodes Dword 0
Multiplier Byte 4
Divisor Byte 4
Index Dword 0
Min Dword 0
Max Dword 0


Insert Proto Value:Dword
Search Proto Value:Dword
Delete Proto Value:Dword
Find_Min Proto 
Find_Max Proto 
Print_Tree_Level_Order_Traversing Proto 
Print_Tree_Pre_Order_Traversing Proto Root_Node:Dword
Print_Tree_In_Order_Traversing Proto Root_Node:Dword
Print_Tree_Post_Order_Traversing Proto Root_Node:Dword
Prompt1 Byte "Breadth First Search , " , 0
Prompt2 Byte "Pre Order Traversal , " , 0
Prompt3 Byte "In Order Traversal , " , 0
Prompt4 Byte "Post Order Traversal , " , 0
Prompt5 Byte "Minimum = " , 0
Prompt6 Byte "Maximum = " , 0
Prompt7 Byte "The Value Which Is To Be Deleted Is Not Found ", 0
Prompt8 Byte "The Value Has Been Deleted Successfully ",0
SearchF Byte "Search Result Found" , 0
SearchNF Byte "Search Result Not Found" , 0


.code
main PROC
call Getprocessheap
mov Handler , Eax
invoke Heapalloc , Handler , HEAP_ZERO_MEMORY , 1500
mov Root , Eax
mov Esi , Eax
invoke Insert , 15
invoke Insert , 10
invoke Insert , 20
invoke Insert , 8
invoke Insert , 12
invoke Insert , 18
invoke Insert , 30
invoke Insert , 16
invoke Insert , 19
invoke Delete , 20
call crlf
invoke Print_Tree_Level_Order_Traversing
call crlf
call crlf
call crlf
mov edx , offset Prompt2
call writestring
call crlf
invoke Print_Tree_Pre_Order_Traversing , Root
call crlf
call crlf
call crlf
mov edx , offset Prompt3
call writestring
call crlf
invoke Print_Tree_In_Order_Traversing , Root
call crlf
call crlf
call crlf
mov edx , offset Prompt4
call writestring
call crlf
invoke Print_Tree_Post_Order_Traversing , Root
call crlf
invoke Search , 87
call crlf
invoke Find_Min
call crlf
invoke Find_Max
call crlf
call crlf
call crlf
call crlf
call crlf
call crlf
main Endp

;--------------------------------------------------------
Insert PROC , Value : Dword   ; Start Of Insert Procedure
mov eax , Esi
sub eax , Root
div Divisor
mov Index , eax
mov ebx , [Esi]
cmp ebx , 0
je Root_Case
cmp Value , ebx
jg Right_Child_Case
jl Left_Child_Case
je Leave_Insert
;------------------
Root_Case :
mov Ebx , Value
mov [Esi] , Ebx
inc Total_Nodes
jmp Leave_Insert
;------------------
Right_Child_Case:
mov eax , Index
imul Multiplier
add eax , 8
Add Esi ,  eax
invoke Insert , Value
jmp Leave_Insert
;------------------
Left_Child_Case:
mov eax , Index
imul Multiplier
Add eax , 4
Add Esi ,  Eax
invoke Insert , Value
jmp Leave_Insert
;------------------
Leave_Insert:
mov Esi , Root
Mov Index , 0
ret
Insert Endp                  ; End Of Insert Procedure
;-----------------------------------------------------




;------------------------------------------------------
Print_Tree_Level_Order_Traversing PROC
push Ebp 
mov Ebp , Esp
mov Ecx , Total_Nodes
mov Edx , Offset Prompt1
call writestring
call crlf
mov Esi , Root
Printing_Tree:
mov Eax , [Esi]
cmp eax , 0
je Do_Not_Write_Number
call writedec
call crlf
add Esi , 4
Loop Printing_Tree
Do_Not_Write_Number :
add Esi , 4
inc ecx
Loop Printing_Tree
pop Ebp
mov esi , Root
ret
Print_Tree_Level_Order_Traversing Endp
;--------------------------------------------------------






;--------------------------------------------------------
Print_Tree_Pre_Order_Traversing PROC , Root_Node : Dword
mov Eax , Root_Node
sub Eax , Root
div Divisor
mov Index , Eax
mov Eax , Root_Node
mov Eax , [Eax]
cmp Eax , 0
je Leave_Print_Tree_Pre_Order_Traversing
call Writedec
call crlf
mov Esi , Root_Node
mov Eax , Index
mul Multiplier
add Eax , 4
add esi , eax
invoke Print_Tree_Pre_Order_Traversing , Esi
mov Eax , Root_Node
sub Eax , Root
div Divisor
mov Index , Eax
mov Esi , Root_Node
mov Eax , Index
mul Multiplier
add Eax , 8
add esi , eax
mov bl , [esi]
invoke Print_Tree_Pre_Order_Traversing , Esi
jmp Leave_Print_Tree_Pre_Order_Traversing
Leave_Print_Tree_Pre_Order_Traversing:
mov esi , Root
ret
Print_Tree_Pre_Order_Traversing Endp
;--------------------------------------------------------







;--------------------------------------------------------
Print_Tree_In_Order_Traversing PROC , Root_Node : Dword
mov esi , Root_Node
mov al , [esi]
cmp al , 0
je Leave_Print_Tree_In_Order_Traversing
mov Eax , Root_Node
mov Esi , Root_Node
sub Eax , Root
div Divisor
mov Index , Eax
mul Multiplier
add eax , 4
add esi , eax
invoke Print_Tree_In_Order_Traversing , esi
mov Eax , Root_Node
mov eax , [eax]
call writedec
call crlf
mov eax , Root_Node
mov Esi , Root_Node
sub Eax , Root
div Divisor
mov Index , Eax
mul Multiplier
add eax , 8
add esi , eax
invoke Print_Tree_In_Order_Traversing , esi
jmp Leave_Print_Tree_In_Order_Traversing
Leave_Print_Tree_In_Order_Traversing:
mov esi , Root
ret
Print_Tree_In_Order_Traversing Endp
;--------------------------------------------------------






;--------------------------------------------------------
Print_Tree_Post_Order_Traversing PROC , Root_Node : Dword
mov esi , Root_Node
mov al , [esi]
cmp al , 0
je Leave_Print_Tree_Post_Order_Traversing
mov Eax , Root_Node
mov Esi , Root_Node
sub Eax , Root
div Divisor
mov Index , Eax
mul Multiplier
add eax , 4
add esi , eax
invoke Print_Tree_Post_Order_Traversing , esi
mov eax , Root_Node
mov Esi , Root_Node
sub Eax , Root
div Divisor
mov Index , Eax
mul Multiplier
add eax , 8
add esi , eax
invoke Print_Tree_Post_Order_Traversing , esi
mov Eax , Root_Node
mov eax , [eax]
call writedec
call crlf
jmp Leave_Print_Tree_Post_Order_Traversing
Leave_Print_Tree_Post_Order_Traversing:
mov esi , Root
ret
Print_Tree_Post_Order_Traversing Endp
;--------------------------------------------------------




;--------------------------------------------------------
Search PROC , Value : Dword   
mov eax , Esi
sub eax , Root
div Divisor
mov Index , eax
mov ebx , [Esi]
cmp ebx , 0
je Not_Found_Case
cmp Value , ebx
je Found_Case
jg Search_Right_Sub_Tree_Case
jl Search_Left_Sub_Tree_Case
;------------------
Not_Found_Case :
mov Edx , Offset SearchNF
call crlf
call writestring
jmp Leave_Search
;------------------
Found_Case:
mov edx , offset SearchF
call crlf
call writestring
jmp Leave_Search
;------------------
Search_Right_Sub_Tree_Case:
mov eax , Index
imul Multiplier
add eax , 8
Add Esi ,  eax
invoke Search , Value
jmp Leave_Search
;------------------
Search_Left_Sub_Tree_Case:
mov eax , Index
imul Multiplier
Add eax , 4
Add Esi ,  Eax
invoke Search , Value
jmp Leave_Search
;------------------
Leave_Search:
mov Esi , Root
Mov Index , 0
ret
Search Endp                 
;-----------------------------------------------------



Find_Min PROC 
mov eax , Esi
sub eax , Root
div Divisor
mov Index , eax
mov bl , 0
cmp [esi] , bl
je Print_Min
mov eax , Index
imul Multiplier
Add eax , 4
mov ebx , [esi]
mov min , ebx
Add Esi ,  Eax
invoke Find_Min 
jmp Leave_Find_Min
Print_Min:
mov edx , offset Prompt5
call crlf
call crlf
call writestring
mov eax , min
call writedec
jmp Leave_Find_Min
Leave_Find_Min:
mov esi , root
ret
Find_Min Endp
;-----------------------------------------------------


Find_Max PROC 
mov eax , Esi
sub eax , Root
div Divisor
mov Index , eax
mov bl , 0
cmp [esi] , bl
je Print_Max
mov eax , Index
imul Multiplier
Add eax , 8
mov ebx , [esi]
mov max , ebx
Add Esi ,  Eax
invoke Find_Max
jmp Leave_Find_Max
Print_Max:
mov edx , offset Prompt6
call crlf
call crlf
call writestring
mov eax , max
call writedec
jmp Leave_Find_Max
Leave_Find_Max:
mov esi , root
ret
Find_Max Endp
;-----------------------------------------------------

Delete PROC , Value : Dword   
mov ecx , Total_Nodes
mov eax , ecx
imul Multiplier
mov ecx , eax
mov eax , Value
Find_Value:
cmp [esi] , eax
je Delete_Value
add esi , 4
loop Find_Value
;---- Value Not Found Case -------
mov edx , offset Prompt7
call crlf
call writestring
call crlf
jmp Leave_Delete
;----- Delete Case -----------
Delete_Value:
mov edi , esi ; temp storing the address of the node which is to be deleted
mov eax , Esi
sub eax , Root
div Divisor
mov Index , eax
mov eax , Index
imul Multiplier
add eax , 4
add esi , eax
mov ecx , 10
mov ebx , esi
Find_In_Order_Predecessor:
mov edx , 0
cmp [esi] , edx
je In_Order_Predecessor_Found
mov ebx , esi
mov eax , esi
sub eax , root
div Divisor
mov Index , eax
mov eax , Index
imul Multiplier
Add eax , 8
add esi , eax
inc ecx
loop Find_In_Order_Predecessor
In_Order_Predecessor_Found:
mov eax , [ebx]
mov [edi] , eax
mov eax , 0
mov [ebx] , eax
dec Total_Nodes
mov edx , offset Prompt8
call crlf
call writestring
call crlf
jmp Leave_Delete
;----------------
Leave_Delete:
mov esi , root
ret
Delete Endp
;----------------------------------------------------------------------


End Main
;------------------------------------------------------------------------------------------------------------------------------------------------------------------
